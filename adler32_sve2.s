//go:build !noasm && arm64
// Code generated by gocc rev-e26dddf -- DO NOT EDIT.
//
// Source file         : adler32_sve2.c
// Clang version       : Apple clang version 16.0.0 (clang-1600.0.26.6)
// Target architecture : arm64
// Compiler options    : -march=armv8.5-a+sve2

#include "textflag.h"

DATA weights<>+0x00(SB)/8, $0x00fd00fe00ff0100
DATA weights<>+0x08(SB)/8, $0x00f900fa00fb00fc
DATA weights<>+0x10(SB)/8, $0x00f500f600f700f8
DATA weights<>+0x18(SB)/8, $0x00f100f200f300f4
DATA weights<>+0x20(SB)/8, $0x00ed00ee00ef00f0
DATA weights<>+0x28(SB)/8, $0x00e900ea00eb00ec
DATA weights<>+0x30(SB)/8, $0x00e500e600e700e8
DATA weights<>+0x38(SB)/8, $0x00e100e200e300e4
DATA weights<>+0x40(SB)/8, $0x00dd00de00df00e0
DATA weights<>+0x48(SB)/8, $0x00d900da00db00dc
DATA weights<>+0x50(SB)/8, $0x00d500d600d700d8
DATA weights<>+0x58(SB)/8, $0x00d100d200d300d4
DATA weights<>+0x60(SB)/8, $0x00cd00ce00cf00d0
DATA weights<>+0x68(SB)/8, $0x00c900ca00cb00cc
DATA weights<>+0x70(SB)/8, $0x00c500c600c700c8
DATA weights<>+0x78(SB)/8, $0x00c100c200c300c4
DATA weights<>+0x80(SB)/8, $0x00bd00be00bf00c0
DATA weights<>+0x88(SB)/8, $0x00b900ba00bb00bc
DATA weights<>+0x90(SB)/8, $0x00b500b600b700b8
DATA weights<>+0x98(SB)/8, $0x00b100b200b300b4
DATA weights<>+0xa0(SB)/8, $0x00ad00ae00af00b0
DATA weights<>+0xa8(SB)/8, $0x00a900aa00ab00ac
DATA weights<>+0xb0(SB)/8, $0x00a500a600a700a8
DATA weights<>+0xb8(SB)/8, $0x00a100a200a300a4
DATA weights<>+0xc0(SB)/8, $0x009d009e009f00a0
DATA weights<>+0xc8(SB)/8, $0x0099009a009b009c
DATA weights<>+0xd0(SB)/8, $0x0095009600970098
DATA weights<>+0xd8(SB)/8, $0x0091009200930094
DATA weights<>+0xe0(SB)/8, $0x008d008e008f0090
DATA weights<>+0xe8(SB)/8, $0x0089008a008b008c
DATA weights<>+0xf0(SB)/8, $0x0085008600870088
DATA weights<>+0xf8(SB)/8, $0x0081008200830084
DATA weights<>+0x100(SB)/8, $0x007d007e007f0080
DATA weights<>+0x108(SB)/8, $0x0079007a007b007c
DATA weights<>+0x110(SB)/8, $0x0075007600770078
DATA weights<>+0x118(SB)/8, $0x0071007200730074
DATA weights<>+0x120(SB)/8, $0x006d006e006f0070
DATA weights<>+0x128(SB)/8, $0x0069006a006b006c
DATA weights<>+0x130(SB)/8, $0x0065006600670068
DATA weights<>+0x138(SB)/8, $0x0061006200630064
DATA weights<>+0x140(SB)/8, $0x005d005e005f0060
DATA weights<>+0x148(SB)/8, $0x0059005a005b005c
DATA weights<>+0x150(SB)/8, $0x0055005600570058
DATA weights<>+0x158(SB)/8, $0x0051005200530054
DATA weights<>+0x160(SB)/8, $0x004d004e004f0050
DATA weights<>+0x168(SB)/8, $0x0049004a004b004c
DATA weights<>+0x170(SB)/8, $0x0045004600470048
DATA weights<>+0x178(SB)/8, $0x0041004200430044
DATA weights<>+0x180(SB)/8, $0x003d003e003f0040
DATA weights<>+0x188(SB)/8, $0x0039003a003b003c
DATA weights<>+0x190(SB)/8, $0x0035003600370038
DATA weights<>+0x198(SB)/8, $0x0031003200330034
DATA weights<>+0x1a0(SB)/8, $0x002d002e002f0030
DATA weights<>+0x1a8(SB)/8, $0x0029002a002b002c
DATA weights<>+0x1b0(SB)/8, $0x0025002600270028
DATA weights<>+0x1b8(SB)/8, $0x0021002200230024
DATA weights<>+0x1c0(SB)/8, $0x001d001e001f0020
DATA weights<>+0x1c8(SB)/8, $0x0019001a001b001c
DATA weights<>+0x1d0(SB)/8, $0x0015001600170018
DATA weights<>+0x1d8(SB)/8, $0x0011001200130014
DATA weights<>+0x1e0(SB)/8, $0x000d000e000f0010
DATA weights<>+0x1e8(SB)/8, $0x0009000a000b000c
DATA weights<>+0x1f0(SB)/8, $0x0005000600070008
DATA weights<>+0x1f8(SB)/8, $0x0001000200030004
GLOBL weights<>(SB), (RODATA|NOPTR), $512

TEXT Â·adler32_sve2(SB), NOSPLIT, $0-36
	MOVW adler+0(FP), R0
	MOVD data+8(FP), R1
	MOVD len+16(FP), R2
	MOVD cap+24(FP), R3
	CBZ  R1, LBB0_9        // <--                                  // cbz	x1, .LBB0_9
	CBZ  R2, LBB0_8        // <--                                  // cbz	x2, .LBB0_8
	NOP                    // (skipped)                            // stp	x29, x30, [sp, #-16]!
	WORD $0x04bf502a       // ?                                    // rdvl	x10, #1
	MOVW $256, R12         // <--                                  // mov	w12, #256
	CMP  $256, R10         // <--                                  // cmp	x10, #256
	ANDW $65535, R0, R8    // <--                                  // and	w8, w0, #0xffff
	LSRW $16, R0, R9       // <--                                  // lsr	w9, w0, #16
	CSEL LO, R10, R12, R11 // <--                                  // csel	x11, x10, x12, lo
	CMP  R2, R11           // <--                                  // cmp	x11, x2
	NOP                    // (skipped)                            // mov	x29, sp
	BLS  LBB0_10           // <--                                  // b.ls	.LBB0_10
	MOVD ZR, R10           // <--                                  // mov	x10, xzr

LBB0_4:
	CBZ   R2, LBB0_7        // <--                                  // cbz	x2, .LBB0_7
	MOVW  $32881, R11       // <--                                  // mov	w11, #32881
	ADD   R10, R1, R10      // <--                                  // add	x10, x1, x10
	MOVKW $(32775<<16), R11 // <--                                  // movk	w11, #32775, lsl #16
	MOVW  $65521, R12       // <--                                  // mov	w12, #65521

LBB0_6:
	WORD  $0x3840154d      // MOVBU.P 1(R10), R13                  // ldrb	w13, [x10], #1
	SUBS  $1, R2, R2       // <--                                  // subs	x2, x2, #1
	ADDW  R13, R8, R8      // <--                                  // add	w8, w8, w13
	ADDW  R9, R8, R9       // <--                                  // add	w9, w8, w9
	UMULL R11, R8, R13     // <--                                  // umull	x13, w8, w11
	UMULL R11, R9, R14     // <--                                  // umull	x14, w9, w11
	LSR   $47, R13, R13    // <--                                  // lsr	x13, x13, #47
	LSR   $47, R14, R14    // <--                                  // lsr	x14, x14, #47
	MSUBW R12, R8, R13, R8 // <--                                  // msub	w8, w13, w12, w8
	MSUBW R12, R9, R14, R9 // <--                                  // msub	w9, w14, w12, w9
	BNE   LBB0_6           // <--                                  // b.ne	.LBB0_6

LBB0_7:
	ORRW R9<<16, R8, R0 // <--                                  // orr	w0, w8, w9, lsl #16
	NOP                 // (skipped)                            // ldp	x29, x30, [sp], #16

LBB0_8:
	MOVW R0, ret+32(FP) // <--
	RET                 // <--                                  // ret

LBB0_9:
	MOVW $1, R0         // <--                                  // mov	w0, #1
	MOVW R0, ret+32(FP) // <--
	RET                 // <--                                  // ret

LBB0_10:
	MOVW  $5552, R13          // <--                                  // mov	w13, #5552
	SUB   R11, R12, R14       // <--                                  // sub	x14, x12, x11
	MOVD  $weights<>(SB), R15 // <--                                  // adrp	x15, weights
	ADD   $0, R15, R15        // <--                                  // add	x15, x15, :lo12:weights
	UDIV  R11, R13, R12       // <--                                  // udiv	x12, x13, x11
	ADD   R11>>1, R14, R13    // <--                                  // add	x13, x14, x11, lsr #1
	WORD  $0x2558e3e0         // ?                                    // ptrue	p0.h
	MOVD  ZR, R10             // <--                                  // mov	x10, xzr
	WORD  $0xa4ae41e0         // ?                                    // ld1h	{ z0.h }, p0/z, [x15, x14, lsl #1]
	MOVW  $65521, R14         // <--                                  // mov	w14, #65521
	WORD  $0xa4ad41e1         // ?                                    // ld1h	{ z1.h }, p0/z, [x15, x13, lsl #1]
	MOVW  $32881, R13         // <--                                  // mov	w13, #32881
	MOVKW $(32775<<16), R13   // <--                                  // movk	w13, #32775, lsl #16
	WORD  $0x2518e3e1         // ?                                    // ptrue	p1.b
	JMP   LBB0_12             // <--                                  // b	.LBB0_12

LBB0_11:
	UMULL R13, R8, R16     // <--                                  // umull	x16, w8, w13
	UMULL R13, R9, R17     // <--                                  // umull	x17, w9, w13
	LSR   $47, R16, R16    // <--                                  // lsr	x16, x16, #47
	MSUB  R11, R2, R15, R2 // <--                                  // msub	x2, x15, x11, x2
	LSR   $47, R17, R17    // <--                                  // lsr	x17, x17, #47
	MSUBW R14, R8, R16, R8 // <--                                  // msub	w8, w16, w14, w8
	CMP   R11, R2          // <--                                  // cmp	x2, x11
	MSUBW R14, R9, R17, R9 // <--                                  // msub	w9, w17, w14, w9
	BCC   LBB0_4           // <--                                  // b.lo	.LBB0_4

LBB0_12:
	UDIV R11, R2, R15      // <--                                  // udiv	x15, x2, x11
	CMP  R12, R15          // <--                                  // cmp	x15, x12
	CSEL LO, R15, R12, R15 // <--                                  // csel	x15, x15, x12, lo
	MOVW R15, R16          // <--                                  // mov	w16, w15
	CBZW R15, LBB0_11      // <--                                  // cbz	w15, .LBB0_11

LBB0_13:
	WORD  $0xa40a4422     // ?                                    // ld1b	{ z2.b }, p1/z, [x1, x10]
	ADD   R11, R10, R10   // <--                                  // add	x10, x10, x11
	SUBSW $1, R16, R16    // <--                                  // subs	w16, w16, #1
	WORD  $0x04012443     // ?                                    // uaddv	d3, p1, z2.b
	WORD  $0x05723844     // ?                                    // uunpklo	z4.h, z2.b
	FMOVD F3, R17         // <--                                  // fmov	x17, d3
	WORD  $0x04606083     // ?                                    // mul	z3.h, z4.h, z0.h
	WORD  $0x04412063     // ?                                    // uaddv	d3, p0, z3.h
	WORD  $0x05733842     // ?                                    // uunpkhi	z2.h, z2.b
	FMOVD F3, R0          // <--                                  // fmov	x0, d3
	WORD  $0x04616042     // ?                                    // mul	z2.h, z2.h, z1.h
	WORD  $0x04412042     // ?                                    // uaddv	d2, p0, z2.h
	MADDW R8, R0, R11, R0 // <--                                  // madd	w0, w11, w8, w0
	ADDW  R17, R8, R8     // <--                                  // add	w8, w8, w17
	FMOVD F2, R17         // <--                                  // fmov	x17, d2
	ADDW  R17, R9, R9     // <--                                  // add	w9, w9, w17
	ADDW  R0, R9, R9      // <--                                  // add	w9, w9, w0
	BNE   LBB0_13         // <--                                  // b.ne	.LBB0_13
	JMP   LBB0_11         // <--                                  // b	.LBB0_11
